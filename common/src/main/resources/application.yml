spring:
  application:
    name: payment-service

  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    consumer:
      group-id: ${KAFKA_CONSUMER_GROUP:pagamento-group}
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"
        spring.json.value.default.type: com.pagamento.events.PagamentoEvent
        spring.json.use.type.headers: false
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        linger.ms: 5
        batch.size: 16384
        compression.type: gzip
        spring.json.add.type.headers: false

  data:
    cassandra:
      contact-points: ${CASSANDRA_CONTACT_POINTS:localhost}
      port: ${CASSANDRA_PORT:9042}
      keyspace-name: ${CASSANDRA_KEYSPACE:payment_keyspace}
      schema-action: ${CASSANDRA_SCHEMA_ACTION:none}
      local-datacenter: ${CASSANDRA_DATACENTER:datacenter1}
      connection:
        connect-timeout: ${CASSANDRA_CONNECT_TIMEOUT:5s}
        init-query-timeout: ${CASSANDRA_INIT_TIMEOUT:10s}

  datasource:
    url: jdbc:h2:mem:testdb
    driver-class-name: org.h2.Driver
    username: sa
    password:

springdoc:
  api-docs:
    path: /v3/api-docs
    enabled: true

swagger-ui:
  path: /swagger-ui.html
  enabled: true

springdoc-defaults:
  operationsSorter: alpha
  tagsSorter: alpha
  default-consumes-media-type: application/json
  default-produces-media-type: application/json

external:
  service:
    health:
      url: ${EXTERNAL_HEALTH_URL:https://api.externa.com/health}
      timeout: ${EXTERNAL_HEALTH_TIMEOUT:2000}
    name: ${EXTERNAL_SERVICE_NAME:PaymentGateway}

management:
  endpoints:
    web:
      exposure:
        include: health, info, metrics, prometheus
    jmx:
      exposure:
        include: health, metrics
  endpoint:
    health:
      show-details: ${MANAGEMENT_HEALTH_SHOW_DETAILS:always}
      probes:
        enabled: true
      group:
        custom:
          include: db, diskSpace, cassandra, kafka
          show-details: always
    metrics:
      enabled: true
      distribution:
        percentiles-histogram:
          http.server.requests: true
        percentiles:
          http.server.requests: 0.5,0.95,0.99
  health:
    cassandra:
      enabled: true
    kafka:
      enabled: true
      timeout: 5s
    diskspace:
      enabled: true
      threshold: 10MB
    db:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
      otlp:
        enabled: ${OTLP_METRICS_ENABLED:true}
    enable:
      kafka: true
      jvm: true
      system: true
      cassandra: true
  tracing:
    sampling:
      probability: 0.1

logging:
  level:
    root: ${LOGGING_LEVEL:INFO}
    org.springframework.web: ${LOGGING_LEVEL_SPRING:INFO}
    org.apache.kafka: ${LOGGING_LEVEL_KAFKA:WARN}
    org.springframework.kafka: ${LOGGING_LEVEL_SPRING_KAFKA:INFO}
    com.pagamento: ${LOGGING_LEVEL_APP:DEBUG}
    com.datastax.oss: ${LOGGING_LEVEL_CASSANDRA:WARN}
  pattern:
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
    console: "%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr([%thread]){orange} %clr(%-5level){green} %clr(%logger{36}){cyan}: %clr(%msg){blue} %n"
  file:
    name: ${LOG_FILE:logs/payment-service.log}
    max-size: ${LOG_FILE_MAX_SIZE:10MB}
    max-history: ${LOG_FILE_MAX_HISTORY:7}
    total-size-cap: ${LOG_FILE_TOTAL_SIZE_CAP:100MB}
    
    
